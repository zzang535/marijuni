# 워크플로우 이름
name : CI/CD Docker

# 트리거 브랜치 지정
on:
  push:
    branches: [ main ]

# 도커 이미지, 버전, 이름 환경변수화
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/marijuni-image
  VERSION: ${{ github.sha }}
  NAME: go_cicd

# jobs 여러개 지정
jobs:
  # job1 - 빌드
  build: 
    name: Build
    runs-on: ubuntu-lastest

    # 빌드는 5개의 step 존재
    steps: 
      # step1 - 현재 상태 소스코드를 컨테이너 안으로 checkout
      - name: Check out source code
        uses: actions/checkout@v2

      # step2 - 가상의 컨테이너 안에 docker 가 돌아갈 수 있는 환경 세팅 
      # ( id 명령어 있음 )
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # step3 - 캐시 작업 ( 잘 모르겠음 )
      # ( with 명령어 있음 )
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }} # runner 설정에서 읽어들임
          restore-keys: |
            ${{ runner.os }}-buildx-

      # step4 - github token을 사용하여 GHCR (깃허브 액션) 에 로그인하기
      # ( with 명령어 있음 )
      - name: Login to ghcr
        uses: docker/login-action@v1
        with: 
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # step5 - 해당하는 GHCR (깃허브 액션) 로 docker image 만들고 push 하기
      # ( id, with 명령어 있음 )
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with: 
          builder: ${{ steps.buildx.ouputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  # job2 : 배포
  deploy: 

    # build 후에 실행되도록 정의
    needs: build 
    name: Deploy

    # AWS ./configure에서 사용할 label명
    runs-on: [ self-hosted, label-go ]

    # 배포는 2개의 step 존재
    steps: 
      # step1 - github token을 사용하여 GHCR (깃허브 액션) 에 로그인하기
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # step2 - 실행중 도커 컨테이너 중지 / 이전 버전 삭제 / 새 이미지로 컨테이너 run
      # ( 3000 -> 80 포트로 수행하도록 지정 )
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm && ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:lastest
          docker run -d -p 80:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest